annoying <- tibble(
'1' = 1:10,
'2' = '1' * 2 + rnorm(length('1'))
)
# 4. Practice referring nonsyntactic names in the following data frame by:
#    a. Extracting the variable called 1
#    b. Plotting scatterplot of 1 versus 2
#    c. Creating new column called 3, which is 2 divided by 1
#    d. renaming the column to one , two, and three
annoying <- tibble(
`1` = 1:10,
`2` = `1` * 2 + rnorm(length(`1`))
)
View(annoying)
# To refer to variables name that are not valid to R,
# surround them with backticks, (')
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
View(tb)
#    a. Extracting the variable called 1
annoying[[`1`]]
#    a. Extracting the variable called 1
annoying[`1`]
#    a. Extracting the variable called 1
annoying$1
#    a. Extracting the variable called 1
annoying$`1`
annoying[["1"]]
#    b. Plotting scatterplot of 1 versus 2
ggplot(annoying, aes(x = `1`, y = `2`)) +
geom_point()
#    c. Creating new column called 3, which is 2 divided by 1
mutate(annoying, `3` = `2` / `1`)
#    d. renaming the column to one , two, and three
rename(annoying, one = `1`, two = `2`, three = `3`)
#    c. Creating new column called 3, which is 2 divided by 1
annoying.c <- mutate(annoying, `3` = `2` / `1`)
#    d. renaming the column to one , two, and three
rename(annoying.c, one = `1`, two = `2`, three = `3`)
source('E:/R Project/r4ds/Chapter 7 Tibbles with tibble.R')
# 5. Use tibble::enframe
?enframe
tibble::enframe(c(a = 2, b = 3))
library(tidyverse)
# read_csv()
heights <- read_csv("data/heights.csv")
# read_csv()
heights
# read_csv()
SP500 <- read_csv("data_csv")
# read_csv()
SP500 <- read_csv("data_csv.csv")
# Supply an inline CSV file
read_csv("a, b, c
1, 2, 3
4, 5, 6")
# skip = n to skip the first n lines; or use
# comment = "#" to drop all lines that start with (#)
read_csv("The first line of metadata
The second line of metadata
x, y, z
1, 2, 3,", skip = 2)
source('E:/R Project/r4ds/Chapter 8 Data Import with readr.R', encoding = 'UTF-8')
# read_csv()
SP500 <- read_csv("data_csv.csv")
# Supply an inline CSV file
read_csv("a, b, c
1, 2, 3
4, 5, 6")
# skip = n to skip the first n lines; or use
# comment = "#" to drop all lines that start with (#)
read_csv("The first line of metadata
The second line of metadata
x, y, z
1, 2, 3,", skip = 2)
# skip = n to skip the first n lines; or use
# comment = "#" to drop all lines that start with (#)
read_csv("The first line of metadata
The second line of metadata
x, y, z
1, 2, 3,", skip = 2)
read_csv("# A comment i want to skip
x, y, z
1, 2, 3", comment = "#")
source('E:/R Project/r4ds/Chapter 8 Data Import with readr.R', encoding = 'UTF-8')
# skip = n to skip the first n lines; or use
# comment = "#" to drop all lines that start with (#)
read_csv("The first line of metadata
The second line of metadata
x, y, z
1, 2, 3,", skip = 2)
read_csv("# A comment i want to skip
x, y, z
1, 2, 3", comment = "#")
# To not to treat the first row as headings,
# and instead label them sequentially from X1 to Xn
read_csv("a, 2, 3\n4, 5, 6", col_names = FALSE)
# Pass col_names a character vector, which
# will be used as the column names
read_csv("1, 2, 3\n4, 5, 6", col_names = c("x", "y", "z"))
# To specifies the value (or values) that are
# used to represent missing values
read_csv("1, 2, 3\n4, 5, .", na = ".")
# To specifies the value (or values) that are
# used to represent missing values
read_csv("a, b, c\n4, 5, .", na = ".")
# 2. what other arguments do read_csv() and read_tsv() have in common?
?read_csv
?read_tsv
# 2. what other arguments do read_csv() and read_tsv() have in common?
#?read_csv
#?read_tsv
union(names(formals(read_csv)), names(formals(read_csv)))
# 3. What are the most important arguments to read_fwf()?
?read_fwf
# 4. What arguments do you need to specify to
#    read the following text into a data frame?
# "x, y\n1, 'a,b'"
read_csv("x, y\n1, 'a,b'")
# 4. What arguments do you need to specify to
#    read the following text into a data frame?
# "x, y\n1, 'a,b'"
read_csv("x, y\n1, 'a, b'")
# 4. What arguments do you need to specify to
#    read the following text into a data frame?
# "x, y\n1, 'a,b'"
read_csv("x, y\n1, 'a, b'", quote = "'")
read_csv("a,b\n1,2,3\n4,5,6")
source('E:/R Project/r4ds/Chapter 8 Data Import with readr.R', encoding = 'UTF-8')
read_csv("a,b\n1,2,3\n4,5,6")
read_csv("a,b,c\n1,2\n1,2,3,4")
read_csv("a,b\n\"1")
read_csv("a,b\n1,2\na,b")
read_csv("a;b\n1;3")
# unreadable, use read_csv2 instead
read_csv2("a;b\n1;3")
library(tidyverse)
str(flights)
str(diamonds)
glimpse(diamonds)
## Parsing A Vector
str(parse_logical(c("TRUE", "FALSE", "NA")))
source('E:/R Project/r4ds/Chapter 8 Data Import with readr.R', encoding = 'UTF-8')
## Parsing A Vector
str(parse_logical(c("TRUE", "FALSE", "NA")))
str(parse_integer(c("1", "2", "3")))
str(parse_date(c("2010-01-01", "1979-10-14")))
# na argument specifies which strings should be treated as missing
parse_integer(c("1", "231", ".", "456"), na = ".")
x <- parse_integer(c("123", "345", "abc", "123.45"))
x
# Use problems() to get the complete set of tibble
# which can be manipulated with dplyr
problems(x)
# Override default value decimal mark on a fractional number
parse_double("1.23")
parse_double("1,23", locale = locale(decimal_mark = ","))
# Extract number embedded in characters that provide context
parse_number("$100")
parse_number("20%")
parse_number("It cost $123.45")
# Ignore the grouping mark
# used in America;
parse_number("$123,456,789")
# used in many part of Europe;
parse_number(
"123.456.789",
locale = (locale(grouping_mark = "."))
)
# used in Switzerland
parse_number(
"123'456'789",
locale = locale(grouping_mark = "'")
)
# Get at the underlying representation of a string
charToRaw("Hagatama")
parse_character(x1, locale = locale(encoding = "Latin1"))
# Handling string data produced by older system
x1 <- "El Ni/xf10 was particularly bad this year"
x2 <- "\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd"
parse_character(x1, locale = locale(encoding = "Latin1"))
parse_character(x1, locale = locale(encoding = "Latin1"))
parse_character(x1, locale = locale(encoding = "Latin1"))
parse_character(x2, locale = locale(encoding = "Shift-JIS"))
# Handling string data produced by older system
x1 <- "El Ni\xf1o was particularly bad this year"
parse_character(x1, locale = locale(encoding = "Latin1"))
# How to find the correct encoding
guess_encoding(charToRaw(x1))
guess_encoding(charToRaw(x2))
# Represent categorical variables that have a known
# set of possible value
fruit <- c("apple", "banana")
parse_factor(c("apple", "banana", "bananana"), levels = fruit)
## Dates, Date-Times, and Times
parse_datetime("2010-10-01T2010")
parse_datetime("20101010")
# Date
parse_date("2010-10-01")
# Time
library(hms)
parse_time("01:10 am")
parse_time("20:10:01")
# Supply customized date and/or time format
parse_date("01/02/15", "%m/%d/%y")
parse_date("01/02/15", "%d/%m/%y")
parse_date("01/02/15", "%y/%m/%d")
# Parse non-English month name
parse_date("1 janvier 2015", "%d %B %Y", locale = locale("fr"))
## Exercise
# 1. Most important arguments to locale()
?locale
install.packages("rvest")
# 2. What happens decimal_mark and grouping_mark being set
#    to the same character? What happens to the default
#    value of grouping_mark when decimal_mark was set to ",“?
#    What happens to the default value of decimal_mark when
#    grouping_mark was set to ".“?
locale(decimal_mark = ".", grouping_mark = ".")
locale(decimal_mark = ",")
locale(grouping_mark = ".")
locale(grouping_mark = ".")
source('E:/R Project/r4ds/Chapter 8 Data Import with readr.R', encoding = 'UTF-8')
source('E:/R Project/r4ds/Chapter 8 Data Import with readr.R', encoding = 'UTF-8')
# 3. What do date_format and time_format options to locale() do?
# Those arguments used to set default date and time format
custom_datetime <- locale(date_format = "Yr. %y Mn. %b Day %d",
time_format = "%H:%M:%S")
dummy_date <- c("Yr. 2020 Mn. 09 Day 14")
parse_date(dummy_date)
dummy_date <- c("Yr. 2020 Mn. 09 Day 14", "Yr. 2020 Mn. 07 Day 29")
parse_date(dummy_date)
parse_date(dummy_date, locale = custom_datetime)
dummy_date <- c("Yr. 93 Mn. Sep Day 14", "Yr. 94 Mn. Jul Day 29")
parse_date(dummy_date)
parse_date(dummy_date, locale = custom_datetime)
dummy_time <- c("01:02:15", "20:09:14")
parse_time(dummy_time)
# 3. What do date_format and time_format options to locale() do?
# Those arguments used to set default date and time format
custom_datetime <- locale(date_format = "Yr. %y Mn. %b Day %d",
time_format = "%H:%M:%Ss")
parse_date(dummy_date, locale = custom_datetime)
parse_time(dummy_time)
dummy_time <- c("01:02:15s", "20:09:14s")
parse_time(dummy_time)
parse_time(dummy_time, locale = custom_datetime)
# 4. Create a new locale object that encapsulates the settings
#    for the types of files you read most commonly.
parse_date("02/01/2006")
source('E:/R Project/r4ds/Chapter 8 Data Import with readr.R', encoding = 'UTF-8')
# 4. Create a new locale object that encapsulates the settings
#    for the types of files you read most commonly.
parse_date("02/01/2006")
id_locale <- locale(date_format = "%d/%m/%Y")
parse_date("02/01/2006", locale = id_locale)
t2 <- "11:15:10.12 PM"
# 7. Generate the correct format string to parse each of
#    the following dates and times:
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
t1 <- "1705"
t2 <- "11:15:10.12 PM"
parse_date(d1, locale = locale(date_format = "%B %d, %Y"))
parse_date(d2, locale = locale(date_format = "%Y-%b-%y"))
parse_date(d2, locale = locale(date_format = "%Y-%b-%d"))
parse_date(d3, locale = locale(date_format = "%d-%b-%Y"))
parse_date(d4, locale = locale(date_format = "%B %d (%Y)"))
parse_date(d5, locale = locale(date_format = "#m/%d/%y"))
parse_date(d5, locale = locale(date_format = "%m/%d/%y"))
parse_time(t1, locale = locale(time_format = "%H%M"))
parse_time(t2, locale = locale(time_format = "%I:%M:%OS %p"))
# guess_parser() returns readr’s best guess
# parse_guess() to uses that guess to parse the column
guess_parser("2010-10-01")
guess_parser("15:01")
guess_parser(c("TRUE", "FALSE"))
guess_parser(c("1", "5", "9"))
guess_parser(c("12,352,561"))
str(parse_guess("2010-10-01"))
# readr only read the first thousand observations.
# - What if the first thousand observations is unique value?
# - what if the first thousand observations is missing value?
# example:
challenge <- read_csv(readr_example("challenge.csv"))
View(challenge)
challenge
read_csv(challenge)
parse_guess(challenge)
read_csv(readr_example("challenge.csv")
read_csv(readr_example("challenge.csv"))
read_csv(readr_example("challenge.csv"))
# Pull out the problem
problems(challenge)
source('E:/R Project/r4ds/Chapter 8 Data Import with readr.R', encoding = 'UTF-8')
# Pull out the problem
problems(challenge)
# readr only read the first thousand observations.
# - What if the first thousand observations is unique value?
# - what if the first thousand observations is missing value?
# example:
challenge <- read_csv(readr_example("challenge.csv"))
# Pull out the problem
problems(challenge)
source('E:/R Project/r4ds/Chapter 8 Data Import with readr.R', encoding = 'UTF-8')
# readr only read the first thousand observations.
# - What if the first thousand observations is unique value?
# - what if the first thousand observations is missing value?
# example:
challenge <- read_csv(readr_example("challenge.csv"))
# Pull out the problem
problems(challenge)
# Tweak the type of the y column to date
challenge <- read_csv(
readr_example("challenge.csv"),
cols(
x = col_double(),
y = col_date()
)
)
# Tweak the type of the y column to date
challenge <- read_csv(
readr_example("challenge.csv"),
cols(
x = col_double(),
y = col_logical()
)
)
# Tweak the type of the y column to date
challenge <- read_csv(
readr_example("challenge.csv"),
col_types = cols(
x = col_double(),
y = col_logical()
)
)
# Tweak the type of the y column to date
challenge <- read_csv(
readr_example("challenge.csv"),
col_types = cols(
x = col_double(),
y = col_date()
)
)
View(challenge)
tail(challenge)
## Other Strategy
challenge2 <- read_csv(
readr_example("challenge.csv"),
guess_max = 1001
)
challenge2
source('E:/R Project/r4ds/Chapter 8 Data Import with readr.R', encoding = 'UTF-8')
## Other Strategy
challenge2 <- read_csv(
readr_example("challenge.csv"),
guess_max = 1001
)
# read in all the columns as character vector
challenge2 <- read_csv(readr_example("challenge.csv"),
col_types = cols(.default = col_character())
)
df <- tribble(
~x, ~y,
"1", "1.21",
"2", "2.32",
"3", "4.56"
)
df
type_convert(df)
## Writing to a File
write_csv(challenge, "challenge.csv")
# Tweak the type of the y column to date
challenge <- read_csv(
readr_example("challenge.csv"),
col_types = cols(
x = col_double(),
y = col_date()
)
)
## Writing to a File
write_csv(challenge, "challenge.csv")
challenge
write_csv(challenge, "challenge-2.csv")
read_csv("challenge-2.csv")
# store data in R’s custom binary format called RDS
write_rds(challenge, "challenge.rds")
# Implements a fast binary file format that
# can be shared across programming languages
library(feather)
install.packages("feather")
# Implements a fast binary file format that
# can be shared across programming languages
library(feather)
write_feather(challenge, "challenge.feather")
read_feather("challenge.feather")
library(tidyverse)
table1
table2
table3
table4a
table4b
# Work with table1
table1 %>%
mutate(cases / population * 10000)
# Work with table1
table1 %>%
mutate(rate = cases / population * 10000)
# 2. Compute cases per year
table1 %>%
count(year, wt = cases)
# 2. Compute cases per year
table1 %>%
count(year, cases)
# 2. Compute cases per year
table1 %>%
count(year, wt = cases)
# 3. Visualize change over time
library(ggplot2)
ggplot(table1, aes(year, cases)) +
geom_line(aes(group = country), color = "grey50") +
geom_point(aes(color = country))
source('E:/R Project/r4ds/Chapter 9 Tidy Data with tidyr.R')
## Tidy Data
table1
table2
table1
table2
table3
table4
table4a
table4b
table2
# 2. Compute the rate for table2, and table4a + table4b
t2_cases <- table2 %>%
select(type == "cases")
# 2. Compute the rate for table2, and table4a + table4b
t2_cases <- table2 %>%
filter(type == "cases")
# 2. Compute the rate for table2, and table4a + table4b
table2 %>%
filter(type == "cases")
# 2. Compute the rate for table2, and table4a + table4b
table2 %>%
filter(type == "cases") %>%
rename(count, cases)
# 2. Compute the rate for table2, and table4a + table4b
table2 %>%
filter(type == "cases") %>%
rename(cases = count)
# 2. Compute the rate for table2, and table4a + table4b
table2 %>%
filter(type == "cases") %>%
rename(cases = count) %>%
select(country, year, cases)
# 2. Compute the rate for table2, and table4a + table4b
t2_cases <- table2 %>%
filter(type == "cases") %>%
rename(cases = count) %>%
select(country, year, cases)
t2_population <- table2 %>%
filter(type == "population") %>%
rename(population == count) %>%
select(country, year, population)
t2_population <- table2 %>%
filter(type == "population")
table2 %>%
filter(type == "population")
table2 %>%
filter(type == "population") %>%
rename(population == count)
table2 %>%
filter(type == "population") %>%
rename(population = count)
table2 %>%
filter(type == "population") %>%
rename(population = count) %>%
select(country, year, population)
t2_population <- table2 %>%
filter(type == "population") %>%
rename(population = count) %>%
select(country, year, population)
# 2. Compute the rate for table2, and table4a + table4b
t2_cases <- table2 %>%
filter(type == "cases") %>%
rename(cases = count) %>%
select(country, year, cases) %>%
arrange(country, year)
t2_cases %>%
mutate(population = t2_population$population)
t2_rate <- t2_cases %>%
mutate(population = t2_population$population)
t2_population <- table2 %>%
filter(type == "population") %>%
rename(population = count) %>%
select(country, year, population) %>%
arrange(country, year)
t2_rate <- t2_cases %>%
mutate(population = t2_population$population,
rate = (case / population) * 10000)
t2_rate <- t2_cases %>%
mutate(population = t2_population$population,
rate = (cases / population) * 10000)
t2_rate
table4a
table4b
